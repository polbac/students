{"ast":null,"code":"import { createConnection } from 'typeorm';\nimport { Country } from '../database/entity/Country';\nimport(\"reflect-metadata\");\n\nrequire('dotenv').config();\n\nlet connection;\nexport function makeConnection() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      global.connection = await createConnection({\n        type: process.env.DB_TYPE,\n        host: process.env.DB_HOST,\n        port: process.env.DB_PORT,\n        username: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_DATABASE,\n        entities: [Country]\n      });\n      console.log(connection);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nexport default (async () => {\n  if (!global.connection) {\n    global.connection = await makeConnection();\n  }\n\n  return global.connection;\n});","map":{"version":3,"sources":["/Users/TROCAUSER/dev/students/connection/index.ts"],"names":["createConnection","Country","require","config","connection","makeConnection","Promise","resolve","reject","global","type","process","env","DB_TYPE","host","DB_HOST","port","DB_PORT","username","DB_USERNAME","password","DB_PASSWORD","database","DB_DATABASE","entities","console","log","err"],"mappings":"AAAA,SAASA,gBAAT,QAAgE,SAAhE;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAQ,kBAAR;;AAEAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAIC,UAAJ;AAEA,OAAO,SAASC,cAAT,GAA+C;AAClD,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,QAAI;AACCC,MAAAA,MAAD,CAAgBL,UAAhB,GAA6B,MAAMJ,gBAAgB,CAAC;AAChDU,QAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,OAD8B;AAEhDC,QAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG,OAF8B;AAGhDC,QAAAA,IAAI,EAAEL,OAAO,CAACC,GAAR,CAAYK,OAH8B;AAIhDC,QAAAA,QAAQ,EAAEP,OAAO,CAACC,GAAR,CAAYO,WAJ0B;AAKhDC,QAAAA,QAAQ,EAAET,OAAO,CAACC,GAAR,CAAYS,WAL0B;AAMhDC,QAAAA,QAAQ,EAAEX,OAAO,CAACC,GAAR,CAAYW,WAN0B;AAOhDC,QAAAA,QAAQ,EAAE,CAAEvB,OAAF;AAPsC,OAAD,CAAnD;AASAwB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,UAAZ;AACAG,MAAAA,OAAO;AACV,KAZD,CAYE,OAAMoB,GAAN,EAAW;AACTnB,MAAAA,MAAM,CAACmB,GAAD,CAAN;AACH;AACJ,GAhBM,CAAP;AAiBH;AAED,gBAAe,YAAiC;AAC5C,MAAG,CAAElB,MAAD,CAAgBL,UAApB,EAAgC;AAC3BK,IAAAA,MAAD,CAAgBL,UAAhB,GAA6B,MAAMC,cAAc,EAAjD;AACH;;AAED,SAAQI,MAAD,CAAgBL,UAAvB;AACH,CAND","sourcesContent":["import { createConnection, ConnectionOptions, Connection } from 'typeorm'\nimport { Country } from '../database/entity/Country'\nimport (\"reflect-metadata\")\n\nrequire('dotenv').config()\n\nlet connection: Connection;\n\nexport function makeConnection(): Promise<Connection> {\n    return new Promise(async (resolve, reject) => {\n        try {\n            (global as any).connection = await createConnection({\n                type: process.env.DB_TYPE,\n                host: process.env.DB_HOST,\n                port: process.env.DB_PORT,\n                username: process.env.DB_USERNAME,\n                password: process.env.DB_PASSWORD,\n                database: process.env.DB_DATABASE,\n                entities: [ Country ],\n            } as ConnectionOptions)\n            console.log(connection)\n            resolve()\n        } catch(err) {\n            reject(err)\n        }\n    })\n}\n\nexport default async (): Promise<Connection> => {\n    if(!(global as any).connection) {\n        (global as any).connection = await makeConnection()\n    }\n\n    return (global as any).connection\n} "]},"metadata":{},"sourceType":"module"}