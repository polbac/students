{"version":3,"file":"static/webpack/static/development/pages/index.js.964d25d0314a06b567f8.hot-update.js","sources":["webpack:///./components/payment-method-form/index.jsx"],"sourcesContent":["import 'date-fns'\nimport { PaymentMethodSchema } from '../../schemas/paymentMethod'\n\nimport {\n    Formik,\n    Form,\n    Field,\n  } from 'formik'\n\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport useLocale from '../../hooks/locale'\nimport FieldError from '../field-error'\n\nfunction PaymentMethodForm(props) {\n  const { countries, careers } = props\n\n    const initialValues = { \n      name: '', \n      email: '',\n      career: '',\n      birthdate: new Date(),\n      country: '',\n      city: '',\n      phone: '',\n    }\n    const { paymentMethodForm: { form } } = useLocale()\n    const date = new Date()\n    const l = form\n\n    return (\n        <React.Fragment>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            \n              <Formik\n                initialValues={initialValues}\n                validationSchema={PaymentMethodSchema}\n                onSubmit={(values, actions) => {\n                  console.log({ values, actions });\n                  alert(JSON.stringify(values, null, 2));\n                  actions.setSubmitting(false);\n                }}\n                render={formikBag => (\n                  <Form>\n                  <Grid container spacing={3}>\n                    \n                    <Grid item xs={6}>\n                      <Field\n                        name=\"name\"\n                        render={({ field, form, meta }) => (\n                          <FormControl fullWidth>\n                            <TextField \n                              value={field.value} \n                              label={l.name.label}\n                              {...field}\n                            />\n                            <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                          </FormControl>\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={6}>\n                      <Field\n                        name=\"email\"\n                        render={({ field, form, meta }) => (\n                          <FormControl fullWidth>\n                            <TextField \n                              value={field.value} \n                              label={l.email.label} \n                              id={l.email.label} \n                              {...field}\n                            />\n                            <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                            </FormControl>\n                        )}\n                      />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                    <Field\n                      name=\"career\"\n                      render={({ field, form, meta }) => (\n                        <FormControl fullWidth>\n                          <TextField\n                          label={l.career.label}\n                          id=\"career\"\n                          select\n                          {...field}\n                          >\n                          {careers.map(option => (\n                            <MenuItem key={option.id} value={option.name}>\n                              {option.name}\n                            </MenuItem>\n                          ))}\n                          </TextField>\n                          <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                          </FormControl>\n                      )}\n                    />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Field\n                        name=\"birdate\"\n                        render={({ field, form, meta }) => (\n                          <FormControl fullWidth>\n                          <KeyboardDatePicker\n                            disableToolbar\n                            format=\"MM/dd/yyyy\"\n                            label={l.birthdate.label}\n                            KeyboardButtonProps={{\n                              'aria-label': 'change date',\n                            }}\n                            {...field}\n                          />\n                          <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                            </FormControl>\n                        )}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Field\n                        name=\"phone\"\n                        render={({ field, form, meta }) => (\n                          <FormControl fullWidth>\n                            <TextField value={field.value} label={l.phone.label} id={l.email.label} {...field} aria-describedby={l.email.label} />\n                            <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                            </FormControl>\n                        )}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Field\n                        name=\"country\"\n                        render={({ field, form, meta }) => (\n                          <FormControl fullWidth>\n                            <TextField\n                            label={l.country.label}\n                            value={field.value}\n                            select\n                            {...field}\n                            >\n                            {countries.map(option => (\n                              <MenuItem key={option.id} value={option.name}>\n                                {option.name}\n                              </MenuItem>\n                            ))}\n                            </TextField>\n                            <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                            </FormControl>\n                        )}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                    <Field\n                      name=\"city\"\n                      render={({ field, form, meta }) => (\n                        <FormControl fullWidth>\n                          <TextField label={l.city.label} id=\"city\" {...field} aria-describedby={l.city.label} />\n                          <FieldError>{meta.touched && meta.error && meta.error}</FieldError>\n                          </FormControl>\n                      )}\n                    />\n                    </Grid>\n                    \n                    <Grid item>\n                      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                        Enviar\n                      </Button>\n                    </Grid>\n                    </Grid>\n                  </Form>\n                )}\n              />\n            \n          </MuiPickersUtilsProvider>\n        </React.Fragment>\n      );\n}\n\nexport default PaymentMethodForm"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAJA;AAAA;AACA;AAYA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAFA;AAFA;AAeA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAFA;AAFA;AAgBA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AADA;AARA;AAFA;AAsBA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAJA;AAFA;AAFA;AAkBA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAUA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AADA;AARA;AAFA;AAqBA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AA7HA;AARA;AAiJA;AACA;AACA;;;;A","sourceRoot":""}