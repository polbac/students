{"version":3,"file":"static/development/pages/api/country.js","sources":["webpack:///webpack/bootstrap","webpack:///./connection/index.ts","webpack:///./database/entity/Career.ts","webpack:///./database/entity/Country.ts","webpack:///./models/http.ts","webpack:///./pages/api/country/index.ts","webpack:///./utils/httpBuilderResponse.ts","webpack:///external \"dotenv\"","webpack:///external \"reflect-metadata\"","webpack:///external \"typeorm\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { createConnection, ConnectionOptions, Connection } from 'typeorm'\nimport { Country } from '../database/entity/Country'\nimport { Career } from '../database/entity/Career'\nimport (\"reflect-metadata\")\n\nrequire('dotenv').config()\n\nexport function makeConnection(): Promise<Connection> {\n    return new Promise(async (resolve, reject) => {\n        try {\n            (global as any).connection = await createConnection({\n                type: process.env.DB_TYPE,\n                host: process.env.DB_HOST,\n                port: process.env.DB_PORT,\n                username: process.env.DB_USERNAME,\n                password: process.env.DB_PASSWORD,\n                database: process.env.DB_DATABASE,\n                entities: [ Country, Career ],\n            } as ConnectionOptions)\n            resolve()\n        } catch(err) {\n            reject(err)\n        }\n    })\n}\n\nexport default () => (global as any).connection as Connection","import {Entity, PrimaryGeneratedColumn, Column} from \"typeorm\";\nimport 'reflect-metadata'\n\n@Entity()\nexport class Career {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}","import {Entity, PrimaryGeneratedColumn, Column} from \"typeorm\";\nimport 'reflect-metadata'\n\n@Entity()\nexport class Country {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}","export enum HttpMethod {\n    POST = 'POST',\n    GET = 'GET',\n}\n\nexport enum HttpStatus {\n    OK = 200,\n    NOT_FOUND = 400,\n    ERROR = 500,\n}","import { createResponse, createErrorResponse } from \"../../../utils/httpBuilderResponse\"\nimport getConnection from '../../../connection'\n\n\nexport default async (req, res) => {\n    try {        \n        const connection = getConnection()\n        const countries = await connection.manager.find('country');\n\n        createResponse(res, {\n            countries,\n        })\n    } catch(err) {\n        console.log('API :: Country :: Error', err)\n        createErrorResponse(res)\n    }\n  \n}","import { HttpStatus } from \"../models/http\"\n\nexport function createNotFoundResponse(res, text = 'Page Not Found') {\n    res.status(HttpStatus.NOT_FOUND)\n        .send({\n            success: false,\n            text,\n        })\n}\n\nexport function createErrorResponse(res, text = 'Internal Server Error') {\n    res.status(HttpStatus.ERROR)\n        .send({\n            success: false,\n            text,\n        })\n}\n\nexport function createResponse(res, body = {}) {\n    res.status(HttpStatus.OK)\n        .send({\n            success: true,\n            body,\n        })\n}","module.exports = require(\"dotenv\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"typeorm\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}